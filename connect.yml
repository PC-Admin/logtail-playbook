---

- name: Connect Ansible hosts to the Logtail/BetterStack platform
  hosts: [logtail_clients]
  gather_facts: false

  tasks:
    - name: Include secret variables
      ansible.builtin.include_vars:
        file: vars/secret.yml
      run_once: true
      ignore_errors: yes

    - name: List the current Logtail sources
      delegate_to: localhost
      ansible.builtin.uri:
        url: https://logs.betterstack.com/api/v1/sources
        method: GET
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ logtail_api_key }}"
      run_once: true
      register: logtail_source_list

    # - name: Print the Logtail source list
    #   debug:
    #     var: logtail_source_list
    #   run_once: true

    - name: Create a dictionary of names and ids from the Logtail source list
      delegate_to: localhost
      set_fact:
        logtail_sources_dict: "{{ dict(logtail_source_list.json.data | map(attribute='attributes.name') | zip(logtail_source_list.json.data | map(attribute='id')) | list) }}"
      run_once: true

    # - name: Print the Logtail sources dictionary
    #   debug:
    #     var: logtail_sources_dict

    - name: Create Logtail source for inventory_hostname if it doesn't already exist
      delegate_to: localhost
      ansible.builtin.uri:
        url: https://logs.betterstack.com/api/v1/sources
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ logtail_api_key }}"
        body_format: json
        body:
          name: "{{ inventory_hostname.split('.')[0] }}"
          platform: "ubuntu"
        status_code: [200, 201]
      when: not inventory_hostname.split('.')[0] in logtail_sources_dict
      register: logtail_source_creation_result

    # - name: Print Logtail source creation result
    #   ansible.builtin.debug:
    #     var: logtail_source_creation_result

    # - name: Print Logtail source json
    #   ansible.builtin.debug:
    #     msg: "Logtail json: {{ logtail_source_creation_result.json }}"
    #   when: logtail_source_creation_result.json is defined

# Configure the Vector APT repository with
#curl -1sLf \
#  'https://repositories.timber.io/public/vector/cfg/setup/bash.deb.sh' \
#  | sudo -E bash

    - name: Download the bash.deb.sh script
      ansible.builtin.get_url:
        url: https://repositories.timber.io/public/vector/cfg/setup/bash.deb.sh
        dest: /tmp/bash.deb.sh
        mode: 0755
        validate_certs: yes

    - name: Run the bash.deb.sh script to configure the Vector repository
      become: yes
      ansible.builtin.command: /tmp/bash.deb.sh
      args:
        creates: /etc/apt/sources.list.d/timber.list

# Install Vector with
#echo -e "Package: vector\nPin: version 0.28.0-1\nPin-Priority: 999" \
#  > /etc/apt/preferences.d/vector && apt-get install vector=0.28.0-1

    - name: Install Vector with specific Pin version and Pin-Priority
      become: yes
      ansible.builtin.apt:
        name: vector
        state: present
        update_cache: yes

# Extend your Vector config by running
#wget -O ->> /etc/vector/vector.toml \
#    https://logs.betterstack.com/vector-toml/ubuntu/LYXVuXyfbyJgRkJZdfhSCqd5

    - name: Extend your Vector config
      become: yes
      ansible.builtin.get_url:
        url: "https://logs.betterstack.com/vector-toml/ubuntu/{{ logtail_source_creation_result.json.data.attributes.token }}"
        dest: /etc/vector/vector.toml
        mode: 0644
        validate_certs: yes
      ignore_errors: true

    - name: "Collect the list of directories in /var/log/ which are NOT owned by root:root or 755 permissions"
      become: yes
      ansible.builtin.shell: find /var/log/ -mindepth 1 -type d ! \( -user root -a -group root -a ! -perm 755 \)
      register: readable_directories
      changed_when: false

    - name: "Filter /var/log/ directories to include only directories with a wildcard for .log files"
      set_fact:
        include_directories: "{{ include_directories +
                                 [item + '/*.log'] }}"
      loop: "{{ readable_directories.stdout_lines }}"
      vars:
        include_directories: []

    - name: 'Add "/var/log/*.log" to end of the {{ include_directories }} array'
      set_fact:
        include_directories: "{{ include_directories +
                                 ['/var/log/*.log'] }}"

    - name: Add a marker comment at the end of the 'ignore_older_secs' line in /etc/vector/vector.toml
      become: yes
      lineinfile:
        path: /etc/vector/vector.toml
        regexp: '^ignore_older_secs = 600.*$'
        line: 'ignore_older_secs = 600 #MARKED'
        backrefs: yes
        insertafter: "^\\[sources\\.better_stack_other_.*$"
        state: present

    - name: Remove the insert section underneath the new marked line
      become: yes
      ansible.builtin.shell: |
          awk '/ignore_older_secs = 600 #MARKED/{flag=1;print;next} /exclude = \[/{flag=0} !flag' /etc/vector/vector.toml > /etc/vector/vector.toml.tmp && mv /etc/vector/vector.toml.tmp /etc/vector/vector.toml

    - name: Print include_directories
      ansible.builtin.debug:
        var: include_directories

# The list of non-root folders eliminates the 'Failed to glob path. error=Permission denied (os error 13)' error
# 'fingerprint.strategy' eliminates the 'More than one file has the same fingerprint.' error

    - name: "Add include_directories block under 'ignore_older_secs = 600 #MARKED' in /etc/vector/vector.toml"
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/vector/vector.toml
        insertafter: 'ignore_older_secs = 600 #MARKED'
        block: |
          fingerprint.strategy = "device_and_inode"
          include = [
          {% for dir in include_directories %}
            "{{ dir }}"{% if not loop.last %},{% endif %}{% if loop.index < include_directories|length %}{{ '
            ' }}{% endif %}
          {% endfor %}
          ]
        state: present

# Allow Vector to access logs that are protected by default by running 
#usermod -a -G mysql vector 2> /dev/null || echo "skipping mysql"; \
#  (usermod -a -G mongodb vector && chmod g+r /var/log/mongodb/mongod.log) 2> /dev/null || echo "skipping mongodb"; \
#  usermod -a -G docker vector 2> /dev/null || echo "skipping docker"

    - name: Check if the mysql, mongodb and docker groups exist
      ansible.builtin.command: "getent group {{ item }}"
      register: check_groups_output
      loop:
        - mysql
        - mongodb
        - docker
      ignore_errors: yes
      changed_when: false
      check_mode: no

    - name: Set existing_groups variable
      set_fact:
        existing_groups: "{{ check_groups_output.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list }}"

    - name: Add 'vector' user to existing groups
      ansible.builtin.user:
        name: vector
        groups: "{{ item }}"
        append: yes
      loop: "{{ existing_groups }}"

#Run 'systemctl restart vector' and verify it's running with 'systemctl status vector'

    - name: Run a Systemd daemon-reload
      become: true
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Start/Restart Vector service
      become: yes
      ansible.builtin.systemd:
        name: vector
        state: restarted
        enabled: yes
        masked: no

    - name: Start and check Vector service status
      become: yes
      ansible.builtin.systemd:
        name: vector
        state: started
        enabled: yes
        masked: no
      register: vector_service_status

    - name: Print Vector service status
      ansible.builtin.debug:
        var: vector_service_status.state
      when: vector_service_status.state is defined